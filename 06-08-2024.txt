//Have the function FirstReverse(str) take the str parameter being passed and return the string in reversed order. For example: if the input is "Hello World and Coders" then your program should return the string sredoC dna dlroW olleH. 
/*
using System;

public class Program
{
    public static void Main()
    {

        string input = "Hello World and Coders";
        string input1 = "coderbyte";
        string input2 = "I Love Code";
        string reversed = FirstReverse(input);
        string reversed1 = FirstReverse(input1);
        string reversed2 = FirstReverse(input2);
   
        Console.WriteLine(reversed);
        Console.WriteLine(reversed1);
        Console.WriteLine(reversed2);
    }

    public static string FirstReverse(string str)
    {

      
        char[] charcterArray = str.ToCharArray();


        Array.Reverse(charcterArray);

  
        return new string(charcterArray);
    }
}
*/

// Have the function CheckArmstrong(num) take the num parameter being passed and return true if number is an Armstrong number, otherwise return false. For example: if num is 153 then output should be true, but if the num is 25 the output should be false. Armstrong number: An n-digit number equal to sum of the nth power of digits. 1**3+5**3+3**3 = 153. 

/*
using System;

public class Program
{
    public static void Main()
    {
        Console.WriteLine(CheckArmstrong(153)); 
        Console.WriteLine(CheckArmstrong(25));
        Console.WriteLine(CheckArmstrong(370));
    }

    public static bool CheckArmstrong(int num)
    {
                                                        // Converting Number into String
        string NumberString = num.ToString();
        int NumberLength = NumberString.Length;
        int Sum = 0;
        int OriginalNumber = num;

                                                        // Calculating the sum of each digit raised to the power of the number of digits
        while (num > 0)
        {
            int digit = num % 10;                       // Extracting last digit
            Sum += (int)Math.Pow(digit, NumberLength); // Raise the digit to the power of numDigits and add to sum
            Sum = Sum + (int)Math.Pow(digit, NumberLength);
            num /= 10; // Removing the last digit
        }

        // Check if the sum is equal to the original number
        return Sum == OriginalNumber;
    }
}
*/


//////////////////////////////////This one submited by me/////////////////////////////////////


using System;

public class Program
{
    public static void Main()
    {
        Console.WriteLine(CheckArmstrong(153));
        Console.WriteLine(CheckArmstrong(25));
        Console.WriteLine(CheckArmstrong(370));
    }

    public static bool CheckArmstrong(int num)
    {
        int OriginalNumber = num;
        int NumberLength = (int)Math.Log10(num) + 1;            // Calculating the number of digits
        int SumOfNumber = 0;
        int TempoNumber = num;

                                                                // Calculating the sum of each digit raised to the power of the number of digits
        while (TempoNumber > 0)
        {
            int digit = TempoNumber % 10;                      //Getting the last digit
            SumOfNumber += PowerOfNumber(digit, NumberLength); 
            TempoNumber /= 10;                                  // Removing the last digit
        }

                                                                // Checking if the sum is equal to the original number
        return SumOfNumber == OriginalNumber;
    }

                                                                //  method for calculating the power 
    private static int PowerOfNumber(int ActualNumber, int EXponent)
    {
        int Result = 1;
        for (int i = 0; i < EXponent; i++)
        {
            Result *= ActualNumber;
        }
        return Result;
    }
}
