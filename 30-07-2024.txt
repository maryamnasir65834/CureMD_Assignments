// Have the function SumMultipler(arr) take the array of numbers stored in the arr and return the string true if any two numbers can be multiplied so that the answer is greater than double the sum of all the elements in the array. if not, return the string false. For example: if arr is [2,5,6,-6,16,2,3,6,5,3] then the sum of all these elements is 42 and doubling it is 84. There are two elements in the array, 16*6= 96 and 96 is greater than 84, so your program should return the string true. 

using System;

public class Program
{
    public static void Main()
    {
        int[] arr = { 2, 5, 6, -6, 16, 2, 3, 6, 5, 3 };
        int[] arr1 = { 2, 2, 2, 2, 4, 1 };
        int[] arr2 = { 1,1,2,10,3,1,12 };
        string result = SumMultiplier(arr);
        string result1 = SumMultiplier(arr1);
        string result2 = SumMultiplier(arr2);
        Console.WriteLine(result);
        Console.WriteLine(result1);
        Console.WriteLine(result2);
    }

    public static string SumMultiplier(int[] arr)
    {
                                        // Determining the sum of all elements in the array
        int sum = 0;
        for (int i = 0; i < arr.Length; i++)
        {
    
            sum = (sum + arr[i]);
        }

                                        // Double the sum to get the threshold
        int Double = 2 * sum;

                                         // Checking all pairs of numbers in the array
        for (int i = 0; i < arr.Length; i++)
        {
            for (int j = i + 1; j < arr.Length; j++)
            {
                if (arr[i] * arr[j] > Double)
                {
                    return "true";
                }
            }
        }

    
        return "false";
    }
}

// Have the function NoughtDeterminer(strArr) take the strArr parameter being passed which will be an array of size eleven. The array will take the shape of a Tic-tac-toe board with spaces strArr[3] and strArr[7] being the seperator("<>") between the rows, and rest of the spaces will be either "X", "O", or "-" which signofies an empty space. So for example strArr may be ["X","O","-","<>","-","O","-","<>","O,"x","-"]. This is a tic tak toe board  with each row seperated double arrow("<>"). Your program should output the spaces in the arry by which any player could win by putting down either an "X" or "O". In the arry above, the output should be 2 bcz if an "O" is placed in strArr[2] then one of the player wins. Each board will only have one solution for a win, not multiple wins. You output should never be 3 or 7 bcz those are the seperator spaces.

using System;

public class Program
{
    public static void Main()
    {
        string[] strArr = { "X", "O", "-", "<>", "-", "O", "-", "<>", "O", "X", "-" };
        string[] strArr1 = { "X", "-", "O", "<>", "-", "-", "O", "<>", "-", "-", "X" };
        string[] strArr2 = { "X", "O", "X", "<>", "-", "O", "O", "<>", "X", "X", "O" };


        Console.WriteLine(NoughtDeterminer(strArr));
        Console.WriteLine(NoughtDeterminer(strArr1)); 
        Console.WriteLine(NoughtDeterminer(strArr2)); 
    }

    public static int NoughtDeterminer(string[] strArr)
    {
                                                    // Convert strArr to a board ignoring the separators
        string[,] board = new string[3, 3];
        int IndexElement = 0;

                                                    // Filling the board
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                board[i, j] = strArr[IndexElement++];
            }
            IndexElement++;                                // Skiping the separator here
        }

                                                    // Function to check if a move leads to a win
        bool CheckingForWin(string[,] board, int row, int column, string player)
        {
            board[row, column] = player;

                                                    // Check row
            if (board[row, 0] == player && board[row, 1] == player && board[row, 2] == player)
                return true;

                                                    // Check column
            if (board[0, column] == player && board[1, column] == player && board[2, column] == player)
                return true;

                                                    // Checking diagonaly (\) like this
            if (row == column && board[0, 0] == player && board[1, 1] == player && board[2, 2] == player)
                return true;

                                                    // Checking non diagonal position(/) like this
            if (row + column == 2 && board[0, 2] == player && board[1, 1] == player && board[2, 0] == player)
                return true;

                                                        // This will reset the board
            board[row, column] = "-";
            return false;
        }

                                                       // Iterating through the board for finding empty spaces and looking if "X" or "O" gets you a win
        for (int i = 0; i < 3; i++)
        {
            for (int j = 0; j < 3; j++)
            {
                if (board[i, j] == "-")
                {
                                                        // Checking  "X" or "O" here 
                    if (CheckingForWin(board, i, j, "X") || CheckingForWin(board, i, j, "O"))
                    {
                                                        // Calculating the index in the original array considering separators
                        int OriginalIndex = (i * 3) + j + (i * 1); // Add 1 for each completed row 
                        return OriginalIndex;
                    }
                }
            }
        }

                                                        // If no winning move is found
        return -1;
    }
}
