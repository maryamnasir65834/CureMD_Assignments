using System;
using System.Linq;

class MainClass
{
    public static int Consecutive(int[] arr)
    {
        // Sort the array
        Array.Sort(arr);

        int minimum = arr[0];
        int maximum = arr[arr.Length - 1];

        // Calculate the total missing numbers between minimum and maximum
        int total_Missing = 0;
        for (int i = minimum + 1; i < maximum; i++)
        {
            if (!arr.Contains(i))
            {
                total_Missing++;
            }
        }

        return total_Missing;
    }

    public static void Main()
    {
        // Example usage
        int[] arr = { 4, 8, 6 };
        Console.WriteLine(Consecutive(arr)); // Output: 2 (numbers needed: 5, 7)

        int[] arr2 = { -2, 10, -3, 5 };
        Console.WriteLine(Consecutive(arr2)); // Output: 10 (numbers needed: -1, 0, 1, 2, 3, 4, 6, 7, 8, 9)

        int[] arr3 = { 5, 10, 15 };
        Console.WriteLine(Consecutive(arr3));
    }
}


ï»¿// Have the function FirstFactorial(num) take the num parameter being passed and return the factorial of it. For example if num= 4, then your program should return (4*3*2*1) = 24. For test cases, range will be between 1 and 18 and input will alawys be an integer
using System;
class MainClass
{
    public static int FirstFactorial(int num)
    {
        // Base case: factorial of 0 or 1 is 1
        if (num == 0 || num == 1)
        {
            return 1;
        }

        // Variable to store the factorial result
        int Factorial = 1;

        // Calculate factorial using a loop
        for (int i = 2; i <= num; i++)
        {
            Factorial = Factorial+ i;
        }

        return Factorial;
    }

    public static void Main()
    {
        // Example usage:
        int input = 4;
        Console.WriteLine($"Factorial of {input} is: {FirstFactorial(input)}"); // Output: 24
    }
}